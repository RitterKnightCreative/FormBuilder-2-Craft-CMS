{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}
{% hook 'formBuilder2.prepCpTemplate' %}

{% set selectedSubnavItem = "forms" %}
{% set bodyClass = 'formbuilder fb-new-form' %}
{% set pageSlug = craft.request.lastSegment %}

{% if pageSlug == 'edit' %}
  {% set page = 'Edit Form' %}
{% else %}
  {% set page = 'New Form' %}
{% endif %}

{% block pageHeader %}
  {% include 'formbuilder2/partials/header' %}
{% endblock %}

{% block main %}
  <section id="fb-content">
    <header class="section-header">
      <div id="page-title"><h1>{{ page|t }}</h1></div>
      <div id="extra-headers"><div class="buttons right"><div class="btngroup"><a href="{{ url('formbuilder2/forms') }}" class="btn icon"><span>{{ "Back to Forms"|t }}</span></a></div></div></div>
    </header>


    <div class="forms pane">
      <form method="post" accept-charset="UTF-8" data-saveshortcut="1">
        <input type="hidden" name="action" value="formBuilder2/form/saveForm">
        <input type="hidden" name="redirect" value="formbuilder2/forms">
        {{ getCsrfInput() }}

        {% if form.id %}
          <input type="hidden" name="formId" value="{{ form.id }}">
          <input type="hidden" name="fieldLayoutId" value="{{ form.fieldLayoutId }}">
        {% endif %}
        
        <div class="menu-tabs">
          <h2 class="current tab-toggle-form-settings"><a href="#form-settings">{{ "Form Settings"|t }}</a></h2>
          <h2 class="tab-toggle-spam-protection"><a href="#spam-protection">{{ "Spam Protection"|t }}</a></h2>
          <h2 class="tab-toggle-messages"><a href="#messages">{{ "Messages"|t }}</a></h2>
          <h2 class="tab-toggle-notify"><a href="#notify">{{ "Email Settings"|t }}</a></h2>
          <h2 class="tab-toggle-fields"><a href="#fields">{{ "Fields"|t }}</a></h2>
        </div>

        <div class="tabs-container">

          <div id="form-settings" class="tab-content">
            {% set ajaxUploadErrors = form.getErrors('cannotUseFileUploadAndAjax') %}

            {{ forms.textField({
              first: true,
              label: "Form Name"|t,
              instructions: "Give this form a name."|t,
              id: 'name',
              name: 'name',
              value: form.name,
              errors: form.getErrors('name'),
              autofocus: true,
              required: true,
              size: 50,
              translatable: true
            }) }}

            {{ forms.textField({
              label: "Handle"|t,
              instructions: "How youâ€™ll refer to this form in the templates."|t,
              id: 'handle',
              class: 'code',
              name: 'handle',
              value: form.handle,
              size: 50,
              errors: form.getErrors('handle'),
              required: true
            }) }}

            {{ forms.textField({
              label: "Submit Button Text"|t,
              instructions: "Custom submit button text."|t,
              id: 'submitButtonText',
              class: 'code',
              name: 'formSettings[submitButtonText]',
              value: form.formSettings.submitButtonText is defined ? form.formSettings.submitButtonText : '',
              size: 50,
              errors: form.getErrors('submitButtonText'),
              required: false
            }) }}

            <div class="method-redirect pane">
              <div class="checkbox-toggle" data-checkbox="customRedirect">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-redirect" class="icon-redirect"/></svg>
                   {{ forms.checkboxField({
                    id: 'customRedirect',
                    class: 'customRedirect',
                    name: 'formSettings[formRedirect][customRedirect]',
                    value: 1,
                    checked: form.formSettings.formRedirect.customRedirect is defined ? form.formSettings.formRedirect.customRedirect : null,
                    errors: form.getErrors('customRedirect'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Use Custom Redirect"|t }}</h3>
                  <p>{{ "Upon form submission redirect to custom success page. By default it redirects to form page."|t }}</p>
                </div>
              </div>
              <div class="checkbox-extra">
                {{ forms.textField({
                  label: "Redirect URL"|t,
                  instructions: "Enter relative redirect page url."|t,
                  id: 'customRedirectUrl',
                  class: 'customRedirectUrl',
                  name: 'formSettings[formRedirect][customRedirectUrl]',
                  value: form.formSettings.formRedirect.customRedirectUrl is defined ? form.formSettings.formRedirect.customRedirectUrl : '',
                  size: 50,
                  errors: form.getErrors('customRedirectUrl'),
                  required: true
                }) }}
              </div>
            </div>

            <div class="method-files pane{% if ajaxUploadErrors %} errors toggle-error{% endif %}">
              <div class="checkbox-toggle" data-checkbox="hasFileUploads">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-upload" class="icon-upload"/></svg>
                   {{ forms.checkboxField({
                    id: 'hasFileUploads',
                    class: 'hasFileUploads',
                    name: 'formSettings[hasFileUploads]',
                    value: 1,
                    checked: form.formSettings.hasFileUploads is defined ? form.formSettings.hasFileUploads : null,
                    errors: form.getErrors('hasFileUploads'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Has Files Uploads"|t }}</h3>
                  <p>{{ "Will this form upload any files?"|t }}</p>
                </div>
              </div>
            </div>

            <div class="method-ajax pane{% if ajaxUploadErrors %} errors toggle-error{% endif %}">
              <div class="checkbox-toggle" data-checkbox="ajaxSubmit">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-rocket" class="icon-rocket"/></svg>
                   {{ forms.checkboxField({
                    id: 'ajaxSubmit',
                    class: 'ajaxSubmit',
                    name: 'formSettings[ajaxSubmit]',
                    value: 1,
                    checked: form.formSettings.ajaxSubmit is defined ? form.formSettings.ajaxSubmit : null,
                    errors: form.getErrors('ajaxSubmit'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Use AJAX?"|t }}</h3>
                  <p>{{ "Should we submit the form via ajax? No page refresh will happen."|t }}</p>
                </div>
              </div>
            </div>
            
            {% for ajaxError in ajaxUploadErrors %}
              <h2 class="toggle-error">{{ ajaxError }}</h2>
            {% endfor %}
          </div>

          <div id="spam-protection" class="tab-content">
            <div class="method-time pane">
              <div class="checkbox-toggle" data-checkbox="spamTimeMethod">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-timer" class="icon-timer"/></svg>
                   {{ forms.checkboxField({
                    id: 'spamTimeMethod',
                    class: 'spamTimeMethod',
                    name: 'spamProtectionSettings[spamTimeMethod]',
                    value: 1,
                    checked: form.spamProtectionSettings.spamTimeMethod is defined ? form.spamProtectionSettings.spamTimeMethod : null,
                    errors: form.getErrors('spamTimeMethod'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Timed Submissions"|t }}</h3>
                  <p>{{ "Allow minimum time to submit a form."|t }}</p>
                </div>
              </div>
              
              <div class="checkbox-extra">
                {{ forms.textField({
                  label: "Time"|t,
                  instructions: "Enter how many seconds to wait untill submissions are valid."|t,
                  id: 'spamTimeMethodTime',
                  class: 'spamTimeMethodTime',
                  name: 'spamProtectionSettings[spamTimeMethodTime]',
                  value: form.spamProtectionSettings.spamTimeMethodTime is defined ? form.spamProtectionSettings.spamTimeMethodTime : '',
                  size: 50,
                  errors: form.getErrors('spamTimeMethodTime'),
                  required: true
                }) }}
              </div>
            </div>

            <div class="method-honeypot pane">
              
              <div class="checkbox-toggle" data-checkbox="spamHoneypotMethod">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-target" class="icon-target"/></svg>
                   {{ forms.checkboxField({
                    id: 'spamHoneypotMethod',
                    class: 'spamHoneypotMethod',
                    name: 'spamProtectionSettings[spamHoneypotMethod]',
                    value: 1,
                    checked: form.spamProtectionSettings.spamHoneypotMethod is defined ? form.spamProtectionSettings.spamHoneypotMethod : null,
                    errors: form.getErrors('spamHoneypotMethod'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Honeypot"|t }}</h3>
                  <p>{{ "String matching spam protection."|t }}</p>
                </div>
              </div>

              <div class="checkbox-extra">
                {{ forms.textField({
                  label: "Honeypot Input Message"|t,
                  instructions: "Enter message for screen readers."|t,
                  id: 'spamHoneypotMethodMessage',
                  class: 'spamHoneypotMethodMessage',
                  name: 'spamProtectionSettings[spamHoneypotMethodMessage]',
                  value: (form.spamProtectionSettings.spamHoneypotMethodMessage is defined ? form.spamProtectionSettings.spamHoneypotMethodMessage : null),
                  size: 50,
                  errors: form.getErrors('spamHoneypotMethodMessage'),
                  required: true
                }) }}
              </div>
            </div>
          </div>

          <div id="messages" class="tab-content">
            {{ forms.textField({
              label: "Success Message"|t,
              instructions: "Please enter success message."|t,
              id: 'successMessage',
              class: 'successMessage',
              name: 'messageSettings[successMessage]',
              value: (form.messageSettings.successMessage is defined ? form.messageSettings.successMessage : null),
              size: 100,
              errors: form.getErrors('successMessage'),
              required: false
            }) }}

            {{ forms.textField({
              label: "Error Message"|t,
              instructions: "Please enter error message."|t,
              id: 'errorMessage',
              class: 'errorMessage',
              name: 'messageSettings[errorMessage]',
              value: (form.messageSettings.errorMessage is defined ? form.messageSettings.errorMessage : null),
              size: 100,
              errors: form.getErrors('errorMessage'),
              required: false
            }) }}
          </div>

          <div id="notify" class="tab-content">

            <div class="method-notify pane">
            
              <div class="checkbox-toggle" data-checkbox="notifySubmission">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-notify" class="icon-notify"/></svg>
                   {{ forms.checkboxField({
                    id: 'notifySubmission',
                    class: 'notifySubmission',
                    name: 'notificationSettings[notifySubmission]',
                    value: 1,
                    checked: form.notificationSettings.notifySubmission is defined ? form.notificationSettings.notifySubmission : null,
                    errors: form.getErrors('notifySubmission'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Notify Admin"|t }}</h3>
                  <p>{{ "Notify admin of form submission."|t }}</p>
                </div>
              </div>
              <div class="checkbox-extra">
                <header>
                  <h3>{{ "Email Settings & Template"|t }}</h3>
                  <div class="instructions">
                    <p>{{ "Please update your email settings and apply optional template styles."|t }}</p>
                  </div>
                </header>

                <div class="notification-tabs-wrapper">
                  <div class="notification-tabs">
                    <h2 class="current"><a href="#email-admin-settings"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="64px" height="63.999px" viewBox="0 0 64 63.999" style="enable-background:new 0 0 64 63.999;" xml:space="preserve"><path style="fill-rule:evenodd;clip-rule:evenodd;fill:#CCCCCC;" d="M32,0C14.327,0,0,14.326,0,31.999c0,17.674,14.327,32,32,32s32-14.326,32-32C64,14.326,49.673,0,32,0zM32,60C16.536,60,4,47.463,4,31.999s12.536-28,28-28s28,12.536,28,28S47.464,60,32,60z"/><path style="fill-rule:evenodd;clip-rule:evenodd;fill:#88C057;" d="M44,27.999v-6c0-1.104-0.896-2-2-2s-2,0.896-2,2v6c-1.104,0-2,0.896-2,2c0,1.104,0.896,2,2,2v9.999c0,1.105,0.896,2.001,2,2.001s2-0.896,2-2.001v-9.999c1.104,0,2-0.896,2-2C46,28.896,45.104,27.999,44,27.999zM34,26v-4.001c0-1.104-0.896-2-2-2s-2,0.896-2,2V26c-1.104,0-2,0.894-2,1.999c0,1.104,0.896,2,2,2v11.999c0,1.105,0.896,2.001,2,2.001s2-0.896,2-2.001V29.999c1.104,0,2-0.896,2-2C36,26.894,35.104,26,34,26zM24,34V21.999c0-1.104-0.896-2-2-2s-2,0.896-2,2V34c-1.104,0-2,0.895-2,2c0,1.104,0.896,1.999,2,1.999v3.999c0,1.105,0.896,2.001,2,2.001s2-0.896,2-2.001v-3.999c1.104,0,2-0.896,2-1.999C26,34.895,25.104,34,24,34z"/></svg></a></h2>
                    <h2><a href="#email-admin-templates"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                    width="56px" height="64px" viewBox="0 0 56 64" style="enable-background:new 0 0 56 64;" xml:space="preserve">
                    <path style="fill:#FFCC66;" d="M52,0H4C1.791,0,0,1.79,0,4v55.999C0,62.209,1.791,64,4,64h34l18-18V4C56,1.79,54.209,0,52,0z"/><path style="fill:#CCA352;" d="M42,46c-2.209,0-4,1.791-4,4v14l18-18H42z"/><path style="fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;" d="M42,20H30c-1.104,0-2,0.896-2,1.999C28,23.104,28.896,24,30,24h12c1.104,0,2-0.896,2-2.001C44,20.896,43.104,20,42,20z M30,15.999h12c1.104,0,2-0.895,2-1.999c0-1.105-0.896-2.001-2-2.001H30c-1.104,0-2,0.896-2,2.001C28,15.104,28.896,15.999,30,15.999z M42,28H14c-1.104,0-2,0.896-2,2s0.896,2,2,2h28c1.104,0,2-0.896,2-2S43.104,28,42,28z M24,35.999H14c-1.104,0-2,0.896-2,2C12,39.104,12.896,40,14,40h10c1.104,0,2-0.896,2-2.001C26,36.895,25.104,35.999,24,35.999z M14,24h8c1.104,0,2-0.896,2-2.001V14c0-1.105-0.896-2.001-2-2.001h-8c-1.104,0-2,0.896-2,2.001v7.999C12,23.104,12.896,24,14,24z"/></svg></a></h2>
                  </div>
                  <div class="notification-tabs-container">
                    <div id="email-admin-settings" class="email-tab-content">
                      <h1>{{ "Email Settings"|t }}</h1>
                      {{ forms.textField({
                        label: "Notification Email"|t,
                        instructions: "Where should submission notification be sent to?"|t,
                        id: 'notifyEmail',
                        class: 'notifyEmail',
                        name: 'notificationSettings[emailSettings][notifyEmail]',
                        value: (form.notificationSettings.emailSettings.notifyEmail is defined ? form.notificationSettings.emailSettings.notifyEmail : null),
                        size: 50,
                        errors: form.getErrors('notifyEmail'),
                        required: false
                      }) }}

                      {% set fields = form.getFieldLayout().getFields() %}
                      {% set groupOptions = [{label: 'Select Email Field', value: ''}] %}
                      {% for field in fields %}
                        {% set item = field.getField(field) %}
                        {% set groupOptions = groupOptions|merge([{ label: item.name, value: item.handle }]) %}
                      {% endfor %}
                      {{ forms.selectField({
                        label: "Custom Email Field"|t,
                        instructions: "Select field where to get notification email from."|t,
                        id: 'customEmailField',
                        name: 'notificationSettings[customEmailField]',
                        options: groupOptions ? groupOptions : '',
                        value: (form.notificationSettings.customEmailField is defined ? form.notificationSettings.customEmailField : null),
                        errors: form.getErrors('customEmailField'),
                        required: false
                      }) }}
                     
                      {{ forms.textField({
                        label: "Email Subject"|t,
                        instructions: "Subject line for email notifications."|t,
                        id: 'emailSubject',
                        class: 'emailSubject',
                        name: 'notificationSettings[emailSettings][emailSubject]',
                        value: (form.notificationSettings.emailSettings.emailSubject is defined ? form.notificationSettings.emailSettings.emailSubject : null),
                        size: 50,
                        errors: form.getErrors('emailSubject'),
                        required: false
                      }) }}

                      <div class="field" id="sendSubmissionData-field">
                        <div class="heading">
                           <label for="emailSubject">{{ "Include Submission Data"|t }}</label>
                          <div class="instructions"><p>{{ "Send submission data with the email?"|t }}</p></div>
                        </div>
                        <div class="input">
                          {{ forms.lightswitch({
                            id: 'sendSubmissionData',
                            class: 'sendSubmissionData',
                            name: 'notificationSettings[emailSettings][sendSubmissionData]',
                            on: (form.notificationSettings.emailSettings.sendSubmissionData is defined ? form.notificationSettings.emailSettings.sendSubmissionData : null),
                            errors: form.getErrors('sendSubmissionData'),
                          }) }}
                        </div>
                      </div>
                    </div>

                    <div id="email-admin-templates" class="email-tab-content">
                      <h1>{{ "Template Settings"|t }}</h1>
                      
                      <div class="field" id="emailTemplateStyle-field">
                        <div class="heading">
                          <label for="emailTemplateStyle">{{ "Email Template Style"|t }}</label>
                          <div class="instructions"><p>{{ "Choose template style for your email notification."|t }}</p></div>
                        </div>

                        <div class="input">
                          {% set templateSettings = (form.notificationSettings.templateSettings.emailTemplateStyle is defined ? form.notificationSettings.templateSettings.emailTemplateStyle : 'text') %}
                          <div class="radio">
                            <input type="radio" value="text" id="emailTemplateStyle" name="notificationSettings[templateSettings][emailTemplateStyle]"{% if templateSettings == 'text' %} checked{% endif %}>
                            <label for="emailTemplateStyle"><span><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="64px" height="60px" viewBox="0 0 64 60" style="enable-background:new 0 0 64 60;" xml:space="preserve"><path style="fill-rule:evenodd;clip-rule:evenodd;fill:#CCCCCC;" d="M28,40.001H2c-1.105,0-2,0.895-2,2C0,43.105,0.895,44,2,44h26
                            c1.104,0,2-0.895,2-1.999C30,40.896,29.104,40.001,28,40.001z M28,8.001H2c-1.105,0-2,0.896-2,1.999c0,1.105,0.895,2,2,2h26
                            c1.104,0,2-0.895,2-2C30,8.896,29.104,8.001,28,8.001z M28,16H2c-1.105,0-2,0.896-2,2.001C0,19.104,0.895,20,2,20h26
                            c1.104,0,2-0.896,2-1.999C30,16.896,29.104,16,28,16z M28,0H2C0.895,0,0,0.896,0,2.001S0.895,4,2,4h26c1.104,0,2-0.895,2-1.999
                            S29.104,0,28,0z M28,32H2c-1.105,0-2,0.896-2,2c0,1.105,0.895,2.001,2,2.001h26c1.104,0,2-0.896,2-2.001
                            C30,32.896,29.104,32,28,32z M28,48H2c-1.105,0-2,0.896-2,2.001c0,1.104,0.895,2,2,2h26c1.104,0,2-0.896,2-2
                            C30,48.896,29.104,48,28,48z M28,24.001H2c-1.105,0-2,0.895-2,1.999c0,1.105,0.895,2,2,2h26c1.104,0,2-0.895,2-2
                            C30,24.896,29.104,24.001,28,24.001z M28,56.001H2c-1.105,0-2,0.896-2,1.999c0,1.105,0.895,2,2,2h26c1.104,0,2-0.895,2-2
                            C30,56.896,29.104,56.001,28,56.001z M62,40.001H36c-1.105,0-2,0.895-2,2C34,43.105,34.895,44,36,44h26c1.104,0,2-0.895,2-1.999
                            C64,40.896,63.104,40.001,62,40.001z M62,8.001H36c-1.105,0-2,0.896-2,1.999c0,1.105,0.895,2,2,2h26c1.104,0,2-0.895,2-2
                            C64,8.896,63.104,8.001,62,8.001z M62,16H36c-1.105,0-2,0.896-2,2.001C34,19.104,34.895,20,36,20h26c1.104,0,2-0.896,2-1.999
                            C64,16.896,63.104,16,62,16z M36,4h26c1.104,0,2-0.895,2-1.999S63.104,0,62,0H36c-1.105,0-2,0.896-2,2.001S34.895,4,36,4z M62,32
                            H36c-1.105,0-2,0.896-2,2c0,1.105,0.895,2.001,2,2.001h26c1.104,0,2-0.896,2-2.001C64,32.896,63.104,32,62,32z M54,48H36
                            c-1.105,0-2,0.896-2,2.001c0,1.104,0.895,2,2,2h18c1.104,0,2-0.896,2-2C56,48.896,55.104,48,54,48z M62,24.001H36
                            c-1.105,0-2,0.895-2,1.999c0,1.105,0.895,2,2,2h26c1.104,0,2-0.895,2-2C64,24.896,63.104,24.001,62,24.001z"/>
                            </svg></span>{{ "Text Only"|t }}</label>
                          </div>
                          <div class="radio">
                            <input type="radio" value="html" id="emailTemplateStyle2" name="notificationSettings[templateSettings][emailTemplateStyle]"{% if templateSettings == 'html' %} checked{% endif %}>
                            <label for="emailTemplateStyle2"><span><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
width="60px" height="59.999px" viewBox="0 0 60 59.999" style="enable-background:new 0 0 60 59.999;" xml:space="preserve">
<path style="fill-rule:evenodd;clip-rule:evenodd;fill:#88C057;" d="M58,55.999c-1,0-1.641-1.066-2-1.999L46,27.999
c-0.793-2.062-1.791-4-4-4s-3.207,1.938-4,4L28,54c-0.359,0.933-1,1.999-2,1.999c-1.104,0-2,0.896-2,2s0.896,2,2,2h8
c1.104,0,2-0.896,2-2s-0.896-2-2-2c-2,0-2.359-1.066-2-1.999l0.77-2.001H47.23L48,54c0.359,0.933,0,1.999-2,1.999
c-1.104,0-2,0.896-2,2s0.896,2,2,2h12c1.104,0,2-0.896,2-2S59.104,55.999,58,55.999z M34.308,47.999L40,33.199l5.692,14.8H34.308z
"/>
<path style="fill:#CCCCCC;" d="M16,6L2,19.999c-1.512,1.513-2,4.074-2,6C0,28.889,11.111,40,14,40c1.926,0,4.488-0.488,6-2
l14-14.001L16,6z"/>
<path style="fill-rule:evenodd;clip-rule:evenodd;fill:#88C057;" d="M35,21c-0.898-1.445-4.203-5.001-6-5.001s-3,0-3,0
S29.941,19.94,31,21c1.367,1.367-1,8.759-1,12c0,1.656,1.343,2.999,3,2.999c1.656,0,3-1.343,3-2.999C36,33,35.898,22.443,35,21z"
/>
<path style="fill-rule:evenodd;clip-rule:evenodd;fill:#999999;" d="M18,0c-4.419,0-8,3.581-8,7.999V8v4l4-4V7.999
C14,5.79,15.791,4,18,4s4,1.79,4,3.999V8v9.999c0,1.104,0.895,2,2,2c1.104,0,2-0.896,2-2V8V7.999C26,3.581,22.418,0,18,0z"/>
</svg>
</span>{{ "HTML Template"|t }}</label>
                          </div>
                        </div>
                      </div>

                      <div id="html-template-extra">
                        <div class="field">
                          <div class="heading">
                            <label for="emailCustomLogo">{{ "Custom Logo"|t }}</label>
                            <div class="instructions"><p>{{ "Brand your email template with custom logo"|t }}</p></div>
                          </div>
                          <div class="input">
                            {% set elements = (elements is defined ? elements : []) -%}
                            {{ forms.elementSelectField({
                              id: 'emailCustomLogo',
                              name: 'notificationSettings[templateSettings][emailCustomLogo]',
                              selectionLabel: "Select Logo"|t,
                              elementType: craft.elements.getElementType("Asset"),
                              elements: elements,
                              criteria: {"kind":[],"localeEnabled":null,"locale":"en_us"},
                              jsClass: 'Craft.AssetSelectInput',
                              limit: 1,
                              errors: form.getErrors('emailCustomLogo'),
                            }) }}
                          </div>
                        </div>

                        <div class="field">
                          <div class="heading">
                            <label for="emailBackgroundColor">{{ "Template Background Color"|t }}</label>
                            <div class="instructions"><p>{{ "Choose background color for your email template"|t }}</p></div>
                          </div>
                          <div class="input">
                            {{ forms.color({
                              id: 'emailBackgroundColor',
                              class: 'emailBackgroundColor',
                              name: 'notificationSettings[templateSettings][emailBackgroundColor]',
                              value: (form.notificationSettings.templateSettings.emailBackgroundColor is defined ? form.notificationSettings.templateSettings.emailBackgroundColor : '#f5f5f5'),
                              errors: form.getErrors('emailBackgroundColor'),
                              required: false
                            }) }}
                          </div>
                        </div>

                        {{ forms.textField({
                          label: "Container With"|t,
                          instructions: "Enter container with for your email template (pixels)."|t,
                          id: 'emailContainerWidth',
                          class: 'emailContainerWidth',
                          name: 'notificationSettings[templateSettings][emailContainerWidth]',
                          value: (form.notificationSettings.templateSettings.emailContainerWidth is defined ? form.notificationSettings.templateSettings.emailContainerWidth : '500'),
                          size: 50,
                          errors: form.getErrors('emailContainerWidth'),
                        }) }}

                      </div>
                      
                      {% includeCssResource "lib/redactor/redactor.css" %}
                      {% includeJsResource "lib/redactor/redactor.js" %}
                      {{ forms.textareaField({
                        label: "Body Copy"|t,
                        instructions: "Enter copy that will appear in the email notification."|t,
                        id: 'emailBodyCopy',
                        class: 'emailBodyCopy',
                        name: 'notificationSettings[templateSettings][emailBodyCopy]',
                        value: (form.notificationSettings.templateSettings.emailBodyCopy is defined ? form.notificationSettings.templateSettings.emailBodyCopy : null),
                        errors: form.getErrors('emailBodyCopy'),
                        required: false
                      }) }}

                      {{ forms.textareaField({
                        label: "Footer Copy"|t,
                        instructions: "Enter copy that will appear in the email footer."|t,
                        id: 'emailAdditionalFooterCopy',
                        class: 'emailAdditionalFooterCopy',
                        name: 'notificationSettings[templateSettings][emailAdditionalFooterCopy]',
                        value: (form.notificationSettings.templateSettings.emailAdditionalFooterCopy is defined ? form.notificationSettings.templateSettings.emailAdditionalFooterCopy : null),
                        errors: form.getErrors('emailAdditionalFooterCopy'),
                        required: false
                      }) }}

                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {% if form.getFieldLayout().getFields() %}
            <div class="method-notify-submitter pane">
              <div class="checkbox-toggle" data-checkbox="notifySubmitter">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-warning" class="icon-warning"/></svg>
                   {{ forms.checkboxField({
                    id: 'notifySubmitter',
                    class: 'notifySubmitter',
                    name: 'notificationSettings[notifySubmitter]',
                    value: 1,
                    checked: form.notificationSettings.notifySubmitter is defined ? form.notificationSettings.notifySubmitter : null,
                    errors: form.getErrors('notifySubmitter'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Notify Submitter"|t }}</h3>
                  <p>{{ "Notify submitter of form submission."|t }}</p>
                </div>
              </div>

              <div class="checkbox-extra">
                <div class="field" id="submitterEmail-field">
                  <div class="heading">
                     <label for="submitterEmail" class="required">{{ "Select Email Field"|t }}</label>
                    <div class="instructions"><p>{{ "Field will be used to send notification to submitter"|t }}</p></div>
                  </div>
                  <div class="input">
                    {% set fields = form.getFieldLayout().getFields() %}
                    {% set groupOptions = [{label: 'Select Email Field', value: ''}] %}
                    {% for field in fields %}
                      {% set item = field.getField(field) %}
                      {% set groupOptions = groupOptions|merge([{ label: item.name, value: item.handle }]) %}
                    {% endfor %}
                    {{ forms.selectField({
                      id: 'submitterEmail',
                      name: 'notificationSettings[submitterEmail]',
                      options: groupOptions ? groupOptions : '',
                      value: (form.notificationSettings.submitterEmail is defined ? form.notificationSettings.submitterEmail : null),
                      errors: form.getErrors('submitterEmail'),
                      required: true
                    }) }}
                    
                    {{ forms.textField({
                      label: "Email Subject"|t,
                      instructions: "Subject line for email notifications."|t,
                      id: 'submitterEmailSubject',
                      class: 'submitterEmailSubject',
                      name: 'notificationSettings[submitterEmailSubject]',
                      value: (form.notificationSettings.submitterEmailSubject is defined ? form.notificationSettings.submitterEmailSubject : null),
                      size: 50,
                      errors: form.getErrors('submitterEmailSubject'),
                      required: false
                    }) }}

                    {{ forms.textField({
                      label: "Public Form Name"|t,
                      instructions: "This will show up as the From Name in the email headers."|t,
                      id: 'publicFormName',
                      class: 'publicFormName',
                      name: 'notificationSettings[publicFormName]',
                      value: (form.notificationSettings.publicFormName is defined ? form.notificationSettings.publicFormName : null),
                      size: 50,
                      errors: form.getErrors('publicFormName'),
                      required: false
                    }) }}
                  </div>
                </div>
              </div>
            </div> 
            {% endif %}
            
            {% if form.getFieldLayout().getFields() %}
            <div class="method-customsubject pane">
              <div class="checkbox-toggle" data-checkbox="customSubject">
                <div class="togglebox">
                  <svg><use xlink:href="#icon-email" class="icon-email"/></svg>
                   {{ forms.checkboxField({
                    id: 'customSubject',
                    class: 'customSubject',
                    name: 'notificationSettings[customSubject]',
                    value: 1,
                    checked: form.notificationSettings.customSubject is defined ? form.notificationSettings.customSubject : null,
                    errors: form.getErrors('customSubject'),
                    required: false
                  }) }}
                </div>
                <div class="togglecontent">
                  <h3>{{ "Custom Subject"|t }}</h3>
                  <p>{{ "Add a custom subject field."|t }}</p>
                </div>
              </div>

              <div class="checkbox-extra">
                <div class="field" id="customSubjectLine-field">
                  <div class="heading">
                     <label for="customSubjectLine" class="required">{{ "Select Field"|t }}</label>
                    <div class="instructions"><p>{{ "Field will be used for the custom subject line"|t }}</p></div>
                  </div>
                  <div class="input">
                    {% set fields = form.getFieldLayout().getFields() %}
                    {% set groupOptions = [{label: 'Select Field', value: ''}] %}
                    {% for field in fields %}
                      {% set item = field.getField(field) %}
                      {% set groupOptions = groupOptions|merge([{ label: item.name, value: item.handle }]) %}
                    {% endfor %}
                    {{ forms.selectField({
                      id: 'customSubjectLine',
                      name: 'notificationSettings[customSubjectLine]',
                      options: groupOptions ? groupOptions : '',
                      value: (form.notificationSettings.customSubjectLine is defined ? form.notificationSettings.customSubjectLine : null),
                      errors: form.getErrors('customSubjectLine'),
                      required: true
                    }) }}
                  </div>
                </div>
              </div>
            </div> 
            {% endif %}

          </div>

          <div id="fields" class="tab-content">
            {% include "formbuilder2/inputs/fieldlayoutdesigner" with {
              fieldLayout: form.getFieldLayout(),
              customizableTabs: true
            } only %}
          </div>

        </div>

        {# Errors #}
        {%- set errors = (errors is defined ? errors : null) -%}
        {% if errors %}
          {% include "formbuilder2/templates/inputs/errorList" with { errors: errors } %}
        {% endif %}

        <div class="buttons">
          <input type="submit" class="btn submit" value="{{ 'Save Form'|t }}">
        </div>

      </form>

    </div>

    {# No Forms #}
    <div class="no-forms" style="display: none;">
      <p>{{ "Hello! You don't have any forms yet."|t }}</p>
      <a href="#" class="create-form-button"><svg><use xlink:href="#icon-text" class="icon-text"/></svg> <span>{{ "Create a Form"|t }}</span></a>
    </div>

  </section>

{% endblock %}

{% set newFormJs %}
  {% if not form.handle %}new Craft.HandleGenerator('#name', '#handle');{% endif %}
  $('#emailBodyCopy').redactor();
  $('#emailAdditionalFooterCopy').redactor();
{% endset %}
{% includeJs newFormJs %}
